[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Akhil\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Akhil\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_181)
[debug]       Load.loadUnit: plugins took 227.1017ms
[debug]       Load.loadUnit: defsScala took 0.7156ms
[debug] [Loading] Scanning directory C:\Users\Akhil\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Akhil\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 37.3944 ms
[debug]           Load.resolveProject(global-plugins) took 220.1463ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Akhil\.sbt\1.0\plugins, plugins: List(<none>))) took 515.2985ms
[debug] [Loading] Done in C:\Users\Akhil\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 586.0761ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7461ms
[debug]     Load.loadUnit(file:/C:/Users/Akhil/.sbt/1.0/plugins/, ...) took 832.6998ms
[debug]   Load.apply: load took 1331.9574ms
[debug]   Load.apply: resolveProjects took 11.1208ms
[debug]   Load.apply: finalTransforms took 115.0495ms
[debug]   Load.apply: config.delegates took 14.298ms
[debug]   Load.apply: Def.make(settings)... took 1547.5606ms
[debug]   Load.apply: structureIndex took 162.0583ms
[debug]   Load.apply: mkStreams took 3.3539ms
[info] loading global plugins from C:\Users\Akhil\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6726.9015ms
[debug]           Load.loadUnit: plugins took 29.7173ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\Akhil\IdeaProjects\ProjectRobinHood\project
[debug]             Load.loadUnit: mkEval took 10.3488ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Akhil\IdeaProjects\ProjectRobinHood\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6203 ms
[info] loading settings for project projectrobinhood-build from idea.sbt ...
[debug]               Load.resolveProject(projectrobinhood-build) took 2.9819ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projectrobinhood-build, base: C:\Users\Akhil\IdeaProjects\ProjectRobinHood\project, plugins: List(<none>))) took 5.103ms
[debug] [Loading] Done in C:\Users\Akhil\IdeaProjects\ProjectRobinHood\project, returning: (projectrobinhood-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3448.6776ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.6362ms
[debug]         Load.loadUnit(file:/C:/Users/Akhil/IdeaProjects/ProjectRobinHood/project/, ...) took 3485.1315ms
[debug]       Load.apply: load took 3486.7321ms
[debug]       Load.apply: resolveProjects took 0.1499ms
[debug]       Load.apply: finalTransforms took 8.5196ms
[debug]       Load.apply: config.delegates took 0.5038ms
[debug]       Load.apply: Def.make(settings)... took 89.9803ms
[debug]       Load.apply: structureIndex took 37.9222ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from C:\Users\Akhil\IdeaProjects\ProjectRobinHood\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5801.241ms
[debug]     Load.loadUnit: defsScala took 0.0062ms
[debug] [Loading] Scanning directory C:\Users\Akhil\IdeaProjects\ProjectRobinHood
[debug]       Load.loadUnit: mkEval took 0.3511ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9856 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 57.4696ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Akhil\IdeaProjects\ProjectRobinHood, plugins: List(<none>))) took 63.4875ms
[debug] [Loading] Done in C:\Users\Akhil\IdeaProjects\ProjectRobinHood, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2384.7635ms
[debug]     Load.loadUnit: cleanEvalClasses took 21.9284ms
[debug]   Load.loadUnit(file:/C:/Users/Akhil/IdeaProjects/ProjectRobinHood/, ...) took 8209.2123ms
[debug] Load.apply: load took 8211.3565ms
[debug] Load.apply: resolveProjects took 0.1788ms
[debug] Load.apply: finalTransforms took 38.0312ms
[debug] Load.apply: config.delegates took 0.3231ms
[debug] Load.apply: Def.make(settings)... took 76.6495ms
[debug] Load.apply: structureIndex took 25.02ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to ProjectRobinHood (in build file:/C:/Users/Akhil/IdeaProjects/ProjectRobinHood/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50892 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50892, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ProjectRobinHood (in build file:/C:/Users/Akhil/IdeaProjects/ProjectRobinHood/)
[debug] > Exec(idea-shell, None, None)
